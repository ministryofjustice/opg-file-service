name: Test & Build

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main
  workflow_dispatch:

defaults:
  run:
    shell: bash

jobs:
  test:
    name: "Test File Service"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
      - name: Run Unit and Integration Tests
        run: make test

      - name: Publish Unit Test Results
        uses: EnricoMi/publish-unit-test-result-action@3a74b2957438d0b6e2e61d67b05318aa25c9e6c6 # v2.20.0
        if: always()
        with:
          check_name: "Unit Test Results"
          files: test-results/unit-tests.xml

  create-tag:
    name: Create Tags
    uses: ./.github/workflows/create-tags.yml

  build:
    name: Build Image
    needs: [test]
    uses: ministryofjustice/opg-github-workflows/.github/workflows/build-multi-architecture-image.yml@27a0f72b83c6b026fa4131230289bfbed9049cc7 # v3.15.0
    with:
      image_name: 311462405659.dkr.ecr.eu-west-1.amazonaws.com/sirius/file-service
      build_options: --file docker/file-service/Dockerfile

  push:
    name: "Push Image"
    runs-on: ubuntu-latest
    needs: [test, create-tag, build]
    outputs:
      branch: ${{ steps.set-outputs.outputs.branch }}
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
      - uses: unfor19/install-aws-cli-action@f5b46b7f32cf5e7ebd652656c5036bf83dd1e60c # 1.0.8

      - name: Set up Docker
        run: |
          echo '{"experimental": true, "features": { "containerd-snapshotter": true }}' | sudo tee -a /etc/docker/daemon.json
          sudo systemctl restart docker
          docker run --privileged --rm tonistiigi/binfmt --install all

      - uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # v5.0.0
        with:
          path: /tmp/images
          name: multi-arch-image
      - name: Load Image
        run: |
          docker load -i /tmp/images/multi-arch-image.tar

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@b47578312673ae6fa5b5096b330d9fbac3d116df # v4.2.1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_ACTIONS }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_ACTIONS }}
          aws-region: eu-west-1
          role-to-assume: arn:aws:iam::311462405659:role/sirius-actions-ci
          role-duration-seconds: 3600
          role-session-name: GitHubActions

      - name: ECR Login
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@062b18b96a7aff071d4dc91bc00c4c1a7945b076 # v2.0.1
        with:
          registries: 311462405659

      - name: Trivy Image Vulnerability Scanner
        env:
          TRIVY_DB_REPOSITORY: ${{ steps.login-ecr.outputs.registry }}/trivy-db-public-ecr/aquasecurity/trivy-db:2
          TRIVY_JAVA_DB_REPOSITORY: ${{ steps.login-ecr.outputs.registry }}/trivy-db-public-ecr/aquasecurity/trivy-java-db:1
          DOCKER_USERNAME: ${{ steps.login-ecr.outputs.docker_username_311462405659_dkr_ecr_eu_west_1_amazonaws_com }}
          DOCKER_PASSWORD: ${{ steps.login-ecr.outputs.docker_password_311462405659_dkr_ecr_eu_west_1_amazonaws_com }}
        run: make scan

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@4e828ff8d448a8a6e532957b1811f387a63867e8 # v3.29.4
        if: always()
        with:
          sarif_file: 'test-results/trivy.sarif'

      - name: Tag & Push
        run: |
          echo "${{ env.BRANCH_NAME }}"
          docker tag 311462405659.dkr.ecr.eu-west-1.amazonaws.com/sirius/file-service:latest 311462405659.dkr.ecr.eu-west-1.amazonaws.com/sirius/file-service:${{ needs.create-tag.outputs.tag }}
          if [ "$BRANCH_NAME" == "main" ]; then
            # We want all of the tags pushed
            docker tag  311462405659.dkr.ecr.eu-west-1.amazonaws.com/sirius/file-service:latest 311462405659.dkr.ecr.eu-west-1.amazonaws.com/sirius/file-service:main-${{ needs.create-tag.outputs.tag }}
            docker tag  311462405659.dkr.ecr.eu-west-1.amazonaws.com/sirius/file-service:latest 311462405659.dkr.ecr.eu-west-1.amazonaws.com/sirius/file-service:main-${{ needs.create-tag.outputs.tag }}-${{ needs.create-tag.outputs.timestamp }}
            docker push --all-tags 311462405659.dkr.ecr.eu-west-1.amazonaws.com/sirius/file-service
          else
            docker push 311462405659.dkr.ecr.eu-west-1.amazonaws.com/sirius/file-service:${{ needs.create-tag.outputs.tag }}
          fi

  end_of_pr_workflow:
    name: End of PR Workflow
    runs-on: ubuntu-latest
    if: always()
    needs: [test, create-tag, build, push]
    steps:
      - name: End of PR Workflow
        run: |
          if ${{ contains(needs.*.result,'failure') }}
          then
            echo "Not all checks succedeed, check the previous jobs."
            exit 1
          else
            echo "All checks succedeed!"
            exit 0
          fi

  push-tags:
    runs-on: ubuntu-latest
    needs: [create-tag, end_of_pr_workflow]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@b47578312673ae6fa5b5096b330d9fbac3d116df # v4.2.1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_ACTIONS }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_ACTIONS }}
          aws-region: eu-west-1
          role-to-assume: arn:aws:iam::997462338508:role/sirius-actions-ci
          role-duration-seconds: 3600
          role-session-name: GitHubActions

      - name: Install AWS CLI
        id: install-aws-cli
        uses: unfor19/install-aws-cli-action@f5b46b7f32cf5e7ebd652656c5036bf83dd1e60c # 1.0.8

      - name: Push Tag to Parameter Store
        run: |
          aws ssm put-parameter --name "opg-file-service-latest-green-build" --type "String" --value "${{ needs.create-tag.outputs.tag}}" --overwrite --region=eu-west-1

      - name: Trigger Dev Deploy
        shell: bash
        run: curl -u ${{ secrets.JENKINS_API_USER }}:${{ secrets.JENKINS_API_TOKEN }} "https://${{ secrets.JENKINS_URL }}/job/Sirius/job/Deploy_to_Development/build?token=${{ secrets.JENKINS_API_TOKEN_NAME }}&cause=Triggered+by+opg-file-service"
